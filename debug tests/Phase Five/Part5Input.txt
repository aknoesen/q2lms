 {
      "type": "multiple_choice",
      "title": "Square Wave Odd Harmonics",
      "question_text": "A 50Hz square wave with 50% duty cycle contains harmonics at:",
      "correct_answer": "150Hz, 250Hz, 350Hz (odd multiples only)",
      "choices": [
        "25Hz, 12.5Hz, 6.25Hz (submultiples)",
        "100Hz, 150Hz, 200Hz (all multiples)",
        "150Hz, 250Hz, 350Hz (odd multiples only)",
        "50Hz only (no harmonics)"
      ],
      "feedback_correct": "Correct! 50% duty square waves have odd harmonics: f₀, 3f₀, 5f₀... = 50Hz, 150Hz, 250Hz, 350Hz...",
      "feedback_incorrect": "Symmetric square waves contain only odd harmonics at frequencies fₙ = (2k+1)f₀.",
      "points": 4,
      "difficulty": "Hard",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.05,
      "image_file": [],
      "subtopic": "Harmonics and Complex Signals"
    },
    {
      "type": "multiple_choice",
      "title": "Triangle Wave Harmonic Decay",
      "question_text": "Triangle waves have harmonic amplitudes that decay as:",
      "correct_answer": "1/n² (quadratic decay)",
      "choices": [
        "1/n (linear decay)",
        "1/n² (quadratic decay)",
        "1/n³ (cubic decay)",
        "e^(-n) (exponential decay)"
      ],
      "feedback_correct": "Correct! Triangle wave Fourier series: x(t) = (8A/π²)∑[sin(2πnf₀t)/n²] for odd n.",
      "feedback_incorrect": "Triangle waves have 1/n² harmonic amplitude decay, faster than square waves (1/n).",
      "points": 3,
      "difficulty": "Hard",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.05,
      "image_file": [],
      "subtopic": "Harmonics and Complex Signals"
    },
    {
      "type": "numerical",
      "title": "Sawtooth Wave Harmonic Content",
      "question_text": "A sawtooth wave with f₀ = 200Hz contains both even and odd harmonics. Calculate the frequency of the 4th harmonic in Hz.",
      "correct_answer": "800",
      "choices": [],
      "feedback_correct": "Correct! 4th harmonic: f₄ = 4 × f₀ = 4 × 200Hz = 800Hz. Sawtooth waves have all integer harmonics.",
      "feedback_incorrect": "Sawtooth harmonics: fₙ = n × f₀ for all integers n. f₄ = 4 × 200Hz = 800Hz.",
      "points": 3,
      "difficulty": "Medium",
      "topic": "Signals Frequency Domain",
      "tolerance": 1,
      "image_file": [],
      "subtopic": "Harmonics and Complex Signals"
    },
    {
      "type": "multiple_choice",
      "title": "Phase Relationships in Harmonics",
      "question_text": "In a square wave Fourier series, all harmonic components have:",
      "correct_answer": "Zero phase (φₙ = 0°)",
      "choices": [
        "Random phase relationships",
        "Zero phase (φₙ = 0°)",
        "90° phase shift (φₙ = π/2)",
        "Phase proportional to harmonic number"
      ],
      "feedback_correct": "Correct! Square wave harmonics are in-phase: x(t) = (4A/π)∑[sin(2πnf₀t)] with φₙ = 0.",
      "feedback_incorrect": "Symmetric square waves have all harmonic components starting in-phase (zero phase).",
      "points": 3,
      "difficulty": "Medium",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.05,
      "image_file": [],
      "subtopic": "Harmonics and Complex Signals"
    },
    {
      "type": "numerical",
      "title": "Bandwidth Calculation",
      "question_text": "A square wave contains significant harmonics up to the 9th harmonic. If f₀ = 1kHz, calculate the signal bandwidth in kHz.",
      "correct_answer": "9",
      "choices": [],
      "feedback_correct": "Correct! Bandwidth ≈ highest significant harmonic = 9 × f₀ = 9 × 1kHz = 9kHz.",
      "feedback_incorrect": "Signal bandwidth extends to highest significant harmonic frequency: BW = 9 × 1kHz = 9kHz.",
      "points": 3,
      "difficulty": "Medium",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.1,
      "image_file": [],
      "subtopic": "Harmonics and Complex Signals"
    },
    {
      "type": "multiple_choice",
      "title": "Fourier Series Convergence",
      "question_text": "The rate of Fourier series convergence for different waveforms is:",
      "correct_answer": "Sine > Triangle > Square",
      "choices": [
        "Square > Triangle > Sine",
        "Sine > Triangle > Square",
        "Triangle > Square > Sine",
        "All waveforms converge equally"
      ],
      "feedback_correct": "Correct! Smoother waveforms converge faster: Sine (1 term) > Triangle (1/n²) > Square (1/n).",
      "feedback_incorrect": "Convergence rate depends on waveform smoothness: fewer discontinuities enable faster convergence.",
      "points": 4,
      "difficulty": "Hard",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.05,
      "image_file": [],
      "subtopic": "Harmonics and Complex Signals"
    },
    {
      "type": "multiple_choice",
      "title": "MATLAB FFT Function Implementation",
      "question_text": "In MATLAB, which function transforms a signal x(t) from time domain to frequency domain X(ω)?",
      "correct_answer": "fft()",
      "choices": [
        "timefreq()",
        "fft()",
        "spectrum()",
        "fourier()"
      ],
      "feedback_correct": "Correct! The fft() function computes the Fast Fourier Transform: X[k] = ∑x[n]e^(-j2πkn/N).",
      "feedback_incorrect": "MATLAB uses fft() for discrete Fourier transform computation, implementing the Cooley-Tukey algorithm.",
      "points": 2,
      "difficulty": "Easy",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.05,
      "image_file": [],
      "subtopic": "MATLAB FFT"
    },
    {
      "type": "true_false",
      "title": "FFT Post-Processing Requirements",
      "question_text": "After computing Y = fft(x) in MATLAB, additional processing steps are required for proper frequency spectrum visualization.",
      "correct_answer": "True",
      "choices": [
        "True",
        "False"
      ],
      "feedback_correct": "Correct! Post-processing includes: magnitude calculation |Y|, normalization, frequency axis creation, and symmetry handling.",
      "feedback_incorrect": "FFT output requires magnitude extraction, scaling, and frequency vector generation for meaningful display.",
      "points": 2,
      "difficulty": "Easy",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.05,
      "image_file": [],
      "subtopic": "MATLAB FFT"
    },
    {
      "type": "numerical",
      "title": "Nyquist Frequency Calculation",
      "question_text": "For a signal sampled at fs = 1000Hz, calculate the Nyquist frequency fN = fs/2 in Hz.",
      "correct_answer": "500",
      "choices": [],
      "feedback_correct": "Correct! Nyquist frequency: fN = fs/2 = 1000Hz/2 = 500Hz represents the maximum accurately representable frequency.",
      "feedback_incorrect": "Nyquist frequency is half the sampling rate: fN = fs/2 = 1000/2 = 500Hz.",
      "points": 3,
      "difficulty": "Medium",
      "topic": "Signals Frequency Domain",
      "tolerance": 1,
      "image_file": [],
      "subtopic": "MATLAB FFT"
    },
    {
      "type": "fill_in_blank",
      "title": "FFT Acronym Definition",
      "question_text": "The acronym FFT in MATLAB stands for _______ Fourier Transform.",
      "correct_answer": "Fast",
      "choices": [],
      "feedback_correct": "Correct! FFT = Fast Fourier Transform, an efficient O(N log N) algorithm for computing the DFT.",
      "feedback_incorrect": "FFT stands for Fast Fourier Transform, developed by Cooley and Tukey for efficient DFT computation.",
      "points": 2,
      "difficulty": "Easy",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.05,
      "image_file": [],
      "subtopic": "MATLAB FFT"
    },
    {
      "type": "numerical",
      "title": "Frequency Resolution Calculation",
      "question_text": "With sampling frequency fs = 1000Hz and N = 1000 samples, calculate the frequency resolution Δf = fs/N in Hz.",
      "correct_answer": "1",
      "choices": [],
      "feedback_correct": "Correct! Frequency resolution: Δf = fs/N = 1000Hz/1000 = 1Hz determines spectral line spacing.",
      "feedback_incorrect": "Frequency resolution formula: Δf = fs/N = 1000Hz/1000 samples = 1Hz per bin.",
      "points": 3,
      "difficulty": "Medium",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.1,
      "image_file": [],
      "subtopic": "MATLAB FFT"
    },
    {
      "type": "multiple_choice",
      "title": "FFT Magnitude Extraction",
      "question_text": "After Y = fft(x), why apply abs(Y) in MATLAB signal processing?",
      "correct_answer": "Extract magnitude from complex FFT output",
      "choices": [
        "Eliminate calculation errors",
        "Extract magnitude from complex FFT output",
        "Normalize frequency scaling",
        "Invert frequency spectrum"
      ],
      "feedback_correct": "Correct! abs(Y) computes magnitude |Y[k]| = √(Re[Y[k]]² + Im[Y[k]]²) from complex FFT output.",
      "feedback_incorrect": "The abs() function extracts magnitude information from complex-valued FFT coefficients.",
      "points": 2,
      "difficulty": "Easy",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.05,
      "image_file": [],
      "subtopic": "MATLAB FFT"
    },
    {
      "type": "multiple_choice",
      "title": "FFT Length Impact on Resolution",
      "question_text": "Increasing FFT length N with fixed sampling rate fs affects:",
      "correct_answer": "Frequency resolution improves: Δf = fs/N decreases",
      "choices": [
        "Frequency range increases",
        "Frequency resolution improves: Δf = fs/N decreases",
        "All frequency amplitudes increase",
        "Computation accuracy decreases"
      ],
      "feedback_correct": "Correct! Longer FFT improves resolution: Δf = fs/N, providing finer frequency discrimination.",
      "feedback_incorrect": "Increasing N with fixed fs reduces Δf = fs/N, improving frequency resolution and spectral detail.",
      "points": 3,
      "difficulty": "Medium",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.05,
      "image_file": [],
      "subtopic": "MATLAB FFT"
    },
    {
      "type": "true_false",
      "title": "Signal Length and FFT Accuracy",
      "question_text": "Longer time-domain signals always guarantee more accurate frequency domain representations in MATLAB FFT analysis.",
      "correct_answer": "False",
      "choices": [
        "True",
        "False"
      ],
      "feedback_correct": "Correct! Longer signals improve resolution but accuracy depends on stationarity, windowing, and signal characteristics.",
      "feedback_incorrect": "FFT accuracy depends on signal properties, windowing effects, and spectral leakage, not just length.",
      "points": 3,
      "difficulty": "Hard",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.05,
      "image_file": [],
      "subtopic": "MATLAB FFT"
    },
    {
      "type": "numerical",
      "title": "Frequency Index Interpretation",
      "question_text": "For FFT peak at index k = 10, with fs = 800Hz and N = 400 samples, calculate the corresponding frequency in Hz.",
      "correct_answer": "20",
      "choices": [],
      "feedback_correct": "Correct! Frequency = k × (fs/N) = 10 × (800Hz/400) = 10 × 2Hz = 20Hz.",
      "feedback_incorrect": "Use frequency mapping: f = k × Δf = k × (fs/N) = 10 × (800/400) = 20Hz.",
      "points": 3,
      "difficulty": "Medium",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.5,
      "image_file": [],
      "subtopic": "MATLAB FFT"
    },
    {
      "type": "multiple_choice",
      "title": "FFT Length vs Signal Length",
      "question_text": "In MATLAB FFT implementation, the relationship between input signal length and FFT output length is:",
      "correct_answer": "FFT length typically equals signal length",
      "choices": [
        "Completely independent parameters",
        "FFT length = half signal length",
        "FFT length typically equals signal length",
        "FFT length always fixed at 1024"
      ],
      "feedback_correct": "Correct! By default, fft(x) produces N-point FFT where N = length(x), though zero-padding can extend length.",
      "feedback_incorrect": "MATLAB fft() typically matches input length, though zero-padding enables longer FFTs for improved resolution.",
      "points": 2,
      "difficulty": "Easy",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.05,
      "image_file": [],
      "subtopic": "MATLAB FFT"
    },
    {
      "type": "multiple_choice",
      "title": "Fourier Transform Mathematical Purpose",
      "question_text": "The Fourier Transform F{x(t)} = X(ω) mathematically accomplishes:",
      "correct_answer": "Time-to-frequency domain conversion",
      "choices": [
        "Signal amplitude enhancement",
        "Time-to-frequency domain conversion",
        "Noise filtering and removal",
        "Data compression for storage"
      ],
      "feedback_correct": "Correct! Fourier Transform: X(ω) = ∫x(t)e^(-jωt)dt decomposes signals into frequency components.",
      "feedback_incorrect": "The Fourier Transform reveals spectral composition by converting temporal signals to frequency domain.",
      "points": 2,
      "difficulty": "Easy",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.05,
      "image_file": [],
      "subtopic": "MATLAB FFT"
    },
    {
      "type": "multiple_choice",
      "title": "Non-Standard Fourier Applications",
      "question_text": "Which application does NOT typically utilize Fourier Transform analysis?",
      "correct_answer": "Instantaneous voltage measurement",
      "choices": [
        "Musical frequency identification",
        "Image spectral analysis",
        "Telecommunications filter design",
        "Instantaneous voltage measurement"
      ],
      "feedback_correct": "Correct! Instantaneous measurements are time-domain tasks; Fourier analysis reveals frequency content over time intervals.",
      "feedback_incorrect": "Fourier Transform analyzes frequency content, not instantaneous time-domain measurements.",
      "points": 2,
      "difficulty": "Easy",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.05,
      "image_file": [],
      "subtopic": "Fourier Analysis"
    },
    {
      "type": "multiple_choice",
      "title": "Fourier Transform Signal Compatibility",
      "question_text": "The Fourier Transform mathematical framework applies to:",
      "correct_answer": "Both simple and complex signal types",
      "choices": [
        "Simple sinusoids only",
        "Periodic signals exclusively",
        "Both simple and complex signal types",
        "Digital signals only"
      ],
      "feedback_correct": "Correct! Fourier analysis applies to any integrable function: periodic, aperiodic, continuous, or discrete signals.",
      "feedback_incorrect": "Fourier Transform is universally applicable to various signal types through different formulations (CTFT, DTFT, DFT).",
      "points": 2,
      "difficulty": "Easy",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.05,
      "image_file": [],
      "subtopic": "Fourier Analysis"
    },
    {
      "type": "multiple_choice",
      "title": "Fourier Analysis Signal Processing Impact",
      "question_text": "Fourier analysis fundamentally enables:",
      "correct_answer": "All of the above applications",
      "choices": [
        "Frequency content understanding",
        "Filter design for frequency selection",
        "Frequency domain signal manipulation",
        "All of the above applications"
      ],
      "feedback_correct": "Correct! Fourier analysis is foundational for spectral analysis, filtering, modulation, and frequency-domain processing.",
      "feedback_incorrect": "Fourier analysis underlies most signal processing: spectral analysis, filtering, convolution via multiplication, etc.",
      "points": 2,
      "difficulty": "Easy",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.05,
      "image_file": [],
      "subtopic": "Fourier Analysis"
    },
    {
      "type": "multiple_choice",
      "title": "Fourier Transform Computational Challenges",
      "question_text": "Primary limitations of Fourier Transform implementation include:",
      "correct_answer": "Both non-periodic representation and computational demands",
      "choices": [
        "Incompatibility with complex signals",
        "Poor representation of non-periodic signals",
        "High computational complexity",
        "Both non-periodic representation and computational demands"
      ],
      "feedback_correct": "Correct! Fourier assumes periodicity and DFT has O(N²) complexity (reduced to O(N log N) with FFT).",
      "feedback_incorrect": "Fourier Transform challenges: spectral leakage for non-periodic signals and computational complexity for large datasets.",
      "points": 3,
      "difficulty": "Medium",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.05,
      "image_file": [],
      "subtopic": "Fourier Analysis"
    },
    {
      "type": "multiple_choice",
      "title": "Fourier Transform Output Generation",
      "question_text": "The Fourier Transform F{x(t)} = X(ω) = ∫x(t)e^(-jωt)dt directly enables creation of:",
      "correct_answer": "Frequency spectrum |X(ω)|",
      "choices": [
        "Time-domain representation",
        "Frequency spectrum |X(ω)|",
        "Phase diagram only",
        "Signal waveform reconstruction"
      ],
      "feedback_correct": "Correct! Fourier Transform produces complex spectrum X(ω), enabling frequency spectrum visualization |X(ω)| vs ω.",
      "feedback_incorrect": "The Fourier Transform converts time signals to frequency domain, creating spectral representations.",
      "points": 2,
      "difficulty": "Easy",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.05,
      "image_file": [],
      "subtopic": "Fourier Analysis"
    },
    {
      "type": "multiple_choice",
      "title": "Fourier Transform Information Content",
      "question_text": "From Fourier Transform output X(ω) = |X(ω)|e^(jφ(ω)), you can determine:",
      "correct_answer": "Signal strength vs frequency |X(ω)|",
      "choices": [
        "Signal strength vs frequency |X(ω)|",
        "Waveform types present",
        "Energy distribution over time",
        "Original sampling rate fs"
      ],
      "feedback_correct": "Correct! |X(ω)| reveals frequency component magnitudes, showing which frequencies dominate the signal.",
      "feedback_incorrect": "Fourier Transform magnitude |X(ω)| indicates the strength or amplitude of each frequency component.",
      "points": 2,
      "difficulty": "Easy",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.05,
      "image_file": [],
      "subtopic": "Fourier Analysis"
    },
    {
      "type": "fill_in_blank",
      "title": "Domain Transformation Definition",
      "question_text": "The Fourier Transform converts signals from time domain x(t) to _______ domain X(ω).",
      "correct_answer": "frequency",
      "choices": [],
      "feedback_correct": "Correct! Fourier Transform: x(t) → X(ω) transforms temporal signals into frequency domain representations.",
      "feedback_incorrect": "The fundamental purpose of Fourier Transform is time-to-frequency domain conversion.",
      "points": 2,
      "difficulty": "Easy",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.05,
      "image_file": [],
      "subtopic": "Fourier Analysis"
    },
    {
      "type": "numerical",
      "title": "Frequency Spectrum Amplitude",
      "question_text": "The frequency spectrum displays the _______ |X(ω)| of different frequency components ω in signal x(t).",
      "correct_answer": "amplitudes",
      "choices": [],
      "feedback_correct": "Correct! Frequency spectrum plots magnitude |X(ω)| showing amplitude distribution across frequencies.",
      "feedback_incorrect": "The frequency spectrum visualizes how signal amplitude varies with frequency components.",
      "points": 2,
      "difficulty": "Easy",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.1,
      "image_file": [],
      "subtopic": "Fourier Analysis"
    },
    {
      "type": "fill_in_blank",
      "title": "Complex Signal Decomposition",
      "question_text": "Complex signals like music contain multiple frequency _______ that Fourier Transform can separate and analyze.",
      "correct_answer": "components",
      "choices": [],
      "feedback_correct": "Correct! Fourier analysis decomposes complex signals into constituent frequency components or harmonics.",
      "feedback_incorrect": "Complex signals are composed of multiple frequency components that can be isolated using Fourier analysis.",
      "points": 2,
      "difficulty": "Easy",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.05,
      "image_file": [],
      "subtopic": "Fourier Analysis"
    },
    {
      "type": "multiple_choice",
      "title": "Filter Design Application",
      "question_text": "Frequency domain analysis using Fourier Transform enables engineers to design:",
      "correct_answer": "Digital filters H(ω) for frequency selection",
      "choices": [
        "Signal amplifiers",
        "Digital filters H(ω) for frequency selection",
        "Power supplies",
        "Data storage systems"
      ],
      "feedback_correct": "Correct! Filter design uses frequency response H(ω) = Y(ω)/X(ω) based on Fourier domain specifications.",
      "feedback_incorrect": "Fourier analysis is fundamental for designing filters that selectively pass or reject frequency bands.",
      "points": 3,
      "difficulty": "Medium",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.05,
      "image_file": [],
      "subtopic": "Fourier Analysis"
    },
    {
      "type": "fill_in_blank",
      "title": "Inverse Transform Operation",
      "question_text": "To convert frequency domain X(ω) back to time domain x(t), apply the _______ Fourier Transform.",
      "correct_answer": "Inverse",
      "choices": [],
      "feedback_correct": "Correct! Inverse Fourier Transform: x(t) = (1/2π)∫X(ω)e^(jωt)dω reconstructs time signals.",
      "feedback_incorrect": "The Inverse Fourier Transform reverses the frequency-to-time domain conversion process.",
      "points": 2,
      "difficulty": "Easy",
      "topic": "Signals Frequency Domain",
      "tolerance": 0.05,
      "image_file": [],
      "subtopic": "Fourier Analysis"
    },