{
  "questions": [
    {
      "type": "multiple_choice",
      "title": "OOP Object Definition",
      "question_text": "In object-oriented programming, an object represents:",
      "choices": [
        "A blueprint for creating data structures",
        "A function that operates on global variables",
        "A real-world entity with properties and methods",
        "A named variable storing primitive data"
      ],
      "correct_answer": "A real-world entity with properties and methods",
      "points": 2,
      "tolerance": 0.05,
      "feedback_correct": "Correct! Objects model real-world entities by encapsulating both data (properties) and behavior (methods).",
      "feedback_incorrect": "Objects are instances that represent tangible or conceptual entities from the problem domain.",
      "image_file": [],
      "topic": "Object-Oriented Programming",
      "subtopic": "Fundamentals",
      "difficulty": "Easy"
    },
    {
      "type": "multiple_choice",
      "title": "Object Encapsulation",
      "question_text": "What two fundamental elements does an object combine in OOP design?",
      "choices": [
        "Classes and inheritance",
        "Properties and methods",
        "Abstraction and polymorphism",
        "Variables and functions"
      ],
      "correct_answer": "Properties and methods",
      "points": 2,
      "tolerance": 0.05,
      "feedback_correct": "Correct! Objects encapsulate data (properties/attributes) and operations (methods/functions) together.",
      "feedback_incorrect": "Encapsulation binds data and the operations that manipulate that data into a single unit.",
      "image_file": [],
      "topic": "Object-Oriented Programming",
      "subtopic": "Fundamentals",
      "difficulty": "Easy"
    },
    {
      "type": "multiple_choice",
      "title": "Class vs Object Relationship",
      "question_text": "What is the relationship between a class and an object in OOP?",
      "choices": [
        "Class is a specific instance",
        "Object modifies class data",
        "Class is a blueprint for creating objects",
        "Object defines class properties"
      ],
      "correct_answer": "Class is a blueprint for creating objects",
      "points": 2,
      "tolerance": 0.05,
      "feedback_correct": "Correct! A class serves as a template/blueprint that defines the structure and behavior for object instances.",
      "feedback_incorrect": "Classes define the template; objects are specific instances created from that template.",
      "image_file": [],
      "topic": "Object-Oriented Programming",
      "subtopic": "Fundamentals",
      "difficulty": "Easy"
    },
    {
      "type": "multiple_choice",
      "title": "Class Definition Scope",
      "question_text": "A class definition specifies:",
      "choices": [
        "Only data attributes of objects",
        "Only methods/behaviors of objects",
        "Both structure and behavior of objects",
        "Display formatting for objects"
      ],
      "correct_answer": "Both structure and behavior of objects",
      "points": 2,
      "tolerance": 0.05,
      "feedback_correct": "Correct! Classes define both the data structure (attributes) and behaviors (methods) that objects will have.",
      "feedback_incorrect": "Class definitions encompass both what objects contain (data) and what they can do (operations).",
      "image_file": [],
      "topic": "Object-Oriented Programming",
      "subtopic": "Fundamentals",
      "difficulty": "Easy"
    },
    {
      "type": "multiple_choice",
      "title": "Property Definition in OOP",
      "question_text": "In OOP, a property (attribute) is:",
      "choices": [
        "An action an object performs",
        "A blueprint for object creation",
        "A named data field associated with objects",
        "A method initialization routine"
      ],
      "correct_answer": "A named data field associated with objects",
      "points": 2,
      "tolerance": 0.05,
      "feedback_correct": "Correct! Properties are named data fields that store the state/characteristics of an object.",
      "feedback_incorrect": "Properties hold the data that describes an object's current state and characteristics.",
      "image_file": [],
      "topic": "Object-Oriented Programming",
      "subtopic": "Fundamentals",
      "difficulty": "Easy"
    },
    {
      "type": "multiple_choice",
      "title": "Object Property Identification",
      "question_text": "In a Car class definition, which element represents a property (attribute) rather than a method?",
      "choices": [
        "start()",
        "accelerate()",
        "color",
        "stop()"
      ],
      "correct_answer": "color",
      "points": 2,
      "tolerance": 0.05,
      "feedback_correct": "Correct! 'color' is a data property that describes a characteristic of the car object.",
      "feedback_incorrect": "Properties store data about objects. Methods like start() and stop() are actions, not characteristics.",
      "image_file": [],
      "topic": "Object-Oriented Programming",
      "subtopic": "Fundamentals",
      "difficulty": "Easy"
    },
    {
      "type": "multiple_choice",
      "title": "Method Definition in OOP",
      "question_text": "In object-oriented programming, methods are:",
      "choices": [
        "Blueprints for creating objects",
        "Data fields stored within objects",
        "Functions that operate on object properties",
        "Class inheritance mechanisms"
      ],
      "correct_answer": "Functions that operate on object properties",
      "points": 2,
      "tolerance": 0.05,
      "feedback_correct": "Correct! Methods are functions that define behaviors and operations for objects.",
      "feedback_incorrect": "Methods are behavioral functions, not data storage or structural elements.",
      "image_file": [],
      "topic": "Object-Oriented Programming",
      "subtopic": "Fundamentals",
      "difficulty": "Easy"
    },
    {
      "type": "multiple_choice",
      "title": "Primary Method Function",
      "question_text": "What is the primary purpose of methods in OOP design?",
      "choices": [
        "Store object data",
        "Define class structure",
        "Perform operations on object properties",
        "Create new class instances"
      ],
      "correct_answer": "Perform operations on object properties",
      "points": 2,
      "tolerance": 0.05,
      "feedback_correct": "Correct! Methods encapsulate behaviors that manipulate and interact with object data.",
      "feedback_incorrect": "Methods define actions and behaviors, not data storage or structural definitions.",
      "image_file": [],
      "topic": "Object-Oriented Programming",
      "subtopic": "Fundamentals",
      "difficulty": "Easy"
    },
    {
      "type": "multiple_choice",
      "title": "Object Instantiation Process",
      "question_text": "In OOP, instantiation refers to:",
      "choices": [
        "Modifying existing object properties",
        "Destroying objects from memory",
        "Creating object instances from class templates",
        "Defining new class blueprints"
      ],
      "correct_answer": "Creating object instances from class templates",
      "points": 2,
      "tolerance": 0.05,
      "feedback_correct": "Correct! Instantiation is the process of creating specific object instances from class definitions.",
      "feedback_incorrect": "Instantiation specifically refers to object creation, not modification or destruction.",
      "image_file": [],
      "topic": "Object-Oriented Programming",
      "subtopic": "Fundamentals",
      "difficulty": "Easy"
    },
    {
      "type": "multiple_choice",
      "title": "Class-Object Relationship Analogy",
      "question_text": "Which analogy best describes the relationship between classes and object instantiation?",
      "choices": [
        "Class is the cookie",
        "Class is the cookie cutter, instantiation creates cookies",
        "Object is the cookie cutter",
        "Object is the recipe template"
      ],
      "correct_answer": "Class is the cookie cutter, instantiation creates cookies",
      "points": 3,
      "tolerance": 0.05,
      "feedback_correct": "Correct! Classes serve as templates (cookie cutter) that create multiple object instances (cookies).",
      "feedback_incorrect": "Classes are templates that produce objects, like cookie cutters creating individual cookies.",
      "image_file": [],
      "topic": "Object-Oriented Programming",
      "subtopic": "Fundamentals",
      "difficulty": "Medium"
    },
    {
      "type": "multiple_choice",
      "title": "Encapsulation Principle",
      "question_text": "What does encapsulation achieve in object-oriented design?",
      "choices": [
        "Simplifies object creation syntax",
        "Bundles data and methods while restricting external access",
        "Enables global access to all object data",
        "Optimizes program execution speed"
      ],
      "correct_answer": "Bundles data and methods while restricting external access",
      "points": 3,
      "tolerance": 0.05,
      "feedback_correct": "Correct! Encapsulation creates data hiding and controlled access through defined interfaces.",
      "feedback_incorrect": "Encapsulation is about data protection and controlled access, not performance or global visibility.",
      "image_file": [],
      "topic": "Object-Oriented Programming",
      "subtopic": "Design Principles",
      "difficulty": "Medium"
    },
    {
      "type": "multiple_choice",
      "title": "Encapsulation Benefits",
      "question_text": "What is the primary benefit of implementing encapsulation in software design?",
      "choices": [
        "Increased code complexity",
        "Enhanced reliability and maintainability",
        "Reduced system security",
        "Faster object instantiation"
      ],
      "correct_answer": "Enhanced reliability and maintainability",
      "points": 2,
      "tolerance": 0.05,
      "feedback_correct": "Correct! Encapsulation improves code quality through data protection and interface clarity.",
      "feedback_incorrect": "Encapsulation promotes better software engineering practices, not complexity or security reduction.",
      "image_file": [],
      "topic": "Object-Oriented Programming",
      "subtopic": "Design Principles",
      "difficulty": "Easy"
    },
    {
      "type": "multiple_choice",
      "title": "Constructor Function Role",
      "question_text": "What is the primary role of a constructor in OOP?",
      "choices": [
        "Define class property specifications",
        "Control object display formatting",
        "Initialize object attributes during instantiation",
        "Destroy objects from memory"
      ],
      "correct_answer": "Initialize object attributes during instantiation",
      "points": 2,
      "tolerance": 0.05,
      "feedback_correct": "Correct! Constructors set initial values for object properties when instances are created.",
      "feedback_incorrect": "Constructors specifically handle object initialization, not definition, display, or destruction.",
      "image_file": [],
      "topic": "Object-Oriented Programming",
      "subtopic": "Fundamentals",
      "difficulty": "Easy"
    },
    {
      "type": "multiple_choice",
      "title": "Constructor Invocation Timing",
      "question_text": "When is a constructor automatically invoked in the object lifecycle?",
      "choices": [
        "When methods are called",
        "When new object instances are created",
        "When properties are modified",
        "When classes are defined"
      ],
      "correct_answer": "When new object instances are created",
      "points": 2,
      "tolerance": 0.05,
      "feedback_correct": "Correct! Constructors execute automatically during object instantiation to set initial state.",
      "feedback_incorrect": "Constructor execution is tied specifically to object creation, not other lifecycle events.",
      "image_file": [],
      "topic": "Object-Oriented Programming",
      "subtopic": "Fundamentals",
      "difficulty": "Easy"
    },
    {
      "type": "multiple_choice",
      "title": "Signal Sampling Definition",
      "question_text": "In digital signal processing, sampling a continuous signal means:",
      "choices": [
        "Converting analog to digital format",
        "Measuring signal frequency content",
        "Taking discrete measurements at regular time intervals $\\Delta t$",
        "Amplifying signal amplitude"
      ],
      "correct_answer": "Taking discrete measurements at regular time intervals $\\Delta t$",
      "points": 2,
      "tolerance": 0.05,
      "feedback_correct": "Correct! Sampling captures signal values at discrete time points: $x[n] = x(n\\Delta t)$.",
      "feedback_incorrect": "Sampling is the temporal discretization process, not format conversion or frequency analysis.",
      "image_file": [],
      "topic": "Signals Time Domain",
      "subtopic": "Sampling",
      "difficulty": "Easy"
    },
    {
      "type": "multiple_choice",
      "title": "Sampling Rate Definition",
      "question_text": "The sampling rate $f_s$ (or sampling frequency) refers to:",
      "choices": [
        "Signal amplitude magnitude",
        "Frequency of discrete measurements per second",
        "Total signal duration",
        "Original signal frequency content"
      ],
      "correct_answer": "Frequency of discrete measurements per second",
      "points": 2,
      "tolerance": 0.05,
      "feedback_correct": "Correct! Sampling rate $f_s = 1/\\Delta t$ determines how frequently signal measurements are taken.",
      "feedback_incorrect": "Sampling rate specifically measures temporal frequency of data acquisition, not signal characteristics.",
      "image_file": [],
      "topic": "Signals Time Domain",
      "subtopic": "Sampling",
      "difficulty": "Easy"
    },
    {
      "type": "multiple_choice",
      "title": "Undersampling Consequences",
      "question_text": "When the sampling rate $f_s$ is too low relative to signal frequency, what occurs?",
      "choices": [
        "Signal amplification",
        "Frequency content increases",
        "Aliasing distortion and information loss",
        "Automatic format conversion"
      ],
      "correct_answer": "Aliasing distortion and information loss",
      "points": 3,
      "tolerance": 0.05,
      "feedback_correct": "Correct! Undersampling ($f_s < 2f_{max}$) causes aliasing, violating the Nyquist criterion.",
      "feedback_incorrect": "Low sampling rates create aliasing artifacts, not amplification or frequency enhancement.",
      "image_file": [],
      "topic": "Signals Time Domain",
      "subtopic": "Sampling",
      "difficulty": "Medium"
    },
    {
      "type": "multiple_choice",
      "title": "Sampling Process Analogy",
      "question_text": "Which analogy best represents the temporal sampling process?",
      "choices": [
        "Taking photographs of moving objects at intervals",
        "Continuous audio recording",
        "Calculating geometric areas",
        "Solving algebraic equations"
      ],
      "correct_answer": "Taking photographs of moving objects at intervals",
      "points": 2,
      "tolerance": 0.05,
      "feedback_correct": "Correct! Photography captures discrete 'snapshots' at time intervals, like signal sampling.",
      "feedback_incorrect": "Sampling involves discrete temporal capture, similar to photography, not continuous processes.",
      "image_file": [],
      "topic": "Signals Time Domain",
      "subtopic": "Sampling",
      "difficulty": "Easy"
    },
    {
      "type": "multiple_choice",
      "title": "Analog-to-Digital Conversion",
      "question_text": "The process of converting continuous analog signals into discrete digital representations is called:",
      "choices": [
        "Sampling",
        "Quantization",
        "Encoding",
        "Modulation"
      ],
      "correct_answer": "Sampling",
      "points": 2,
      "tolerance": 0.05,
      "feedback_correct": "Correct! Sampling discretizes continuous signals in time, creating digital signal sequences.",
      "feedback_incorrect": "While quantization and encoding are related, sampling specifically handles temporal discretization.",
      "image_file": [],
      "topic": "Signals Time Domain",
      "subtopic": "Sampling",
      "difficulty": "Easy"
    },
    {
      "type": "true_false",
      "title": "Sampling Rate and Quality Relationship",
      "question_text": "Higher sampling rates $f_s$ always improve digital signal representation quality and reduce aliasing effects.",
      "choices": [
        "True",
        "False"
      ],
      "correct_answer": "True",
      "points": 2,
      "tolerance": 0.05,
      "feedback_correct": "Correct! Higher $f_s$ provides better temporal resolution and reduces aliasing, improving signal fidelity.",
      "feedback_incorrect": "Increased sampling rates capture more signal information, reducing aliasing and improving quality.",
      "image_file": [],
      "topic": "Signals Time Domain",
      "subtopic": "Sampling",
      "difficulty": "Easy"
    },
    {
      "type": "numerical",
      "title": "Cosine Function Analysis",
      "question_text": "For the function $i(t) = 10\\cos(4\\pi t)$, calculate the frequency $f$ in Hz using $f = \\omega/(2\\pi)$.",
      "choices": [],
      "correct_answer": "2",
      "points": 3,
      "tolerance": 0.1,
      "feedback_correct": "Correct! $\\omega = 4\\pi\\,\\text{rad/s}$, so $f = 4\\pi/(2\\pi) = 2\\,\\text{Hz}$. Amplitude $A = 10$, phase $\\phi = 0$.",
      "feedback_incorrect": "Extract $\\omega$ from the argument: $4\\pi t$ means $\\omega = 4\\pi$, then $f = \\omega/(2\\pi) = 2\\,\\text{Hz}$.",
      "image_file": [],
      "topic": "Signals Time Domain",
      "subtopic": "Sinusoidal Functions",
      "difficulty": "Medium"
    },
    {
      "type": "multiple_choice",
      "title": "Cosine Wave Parameters",
      "question_text": "For $i(t) = 10\\cos(4\\pi t)$, identify the amplitude $A$, frequency $f$, and phase $\\phi$:",
      "choices": [
        "$A = 10$, $f = 4\\,\\text{Hz}$, $\\phi = \\pi/2$",
        "$A = 4$, $f = 10\\,\\text{Hz}$, $\\phi = 0$",
        "$A = 10$, $f = 2\\,\\text{Hz}$, $\\phi = 0$",
        "$A = 10$, $f = 2\\,\\text{Hz}$, $\\phi = \\pi$"
      ],
      "correct_answer": "$A = 10$, $f = 2\\,\\text{Hz}$, $\\phi = 0$",
      "points": 3,
      "tolerance": 0.05,
      "feedback_correct": "Correct! $A = 10$, $\\omega = 4\\pi$ gives $f = 2\\,\\text{Hz}$, and no phase term means $\\phi = 0$.",
      "feedback_incorrect": "Standard form: $A\\cos(\\omega t + \\phi)$. Here $A = 10$, $\\omega = 4\\pi \\rightarrow f = 2\\,\\text{Hz}$, $\\phi = 0$.",
      "image_file": [],
      "topic": "Signals Time Domain",
      "subtopic": "Sinusoidal Functions",
      "difficulty": "Medium"
    },
    {
      "type": "numerical",
      "title": "Phase-Shifted Sine Analysis",
      "question_text": "For $v(t) = 2\\sin(2\\pi t + \\pi/2)$, calculate the frequency $f$ in Hz.",
      "choices": [],
      "correct_answer": "1",
      "points": 3,
      "tolerance": 0.1,
      "feedback_correct": "Correct! $\\omega = 2\\pi\\,\\text{rad/s}$, so $f = 2\\pi/(2\\pi) = 1\\,\\text{Hz}$. $A = 2$, $\\phi = \\pi/2$.",
      "feedback_incorrect": "From $2\\pi t$ coefficient: $\\omega = 2\\pi$, therefore $f = \\omega/(2\\pi) = 1\\,\\text{Hz}$.",
      "image_file": [],
      "topic": "Signals Time Domain",
      "subtopic": "Sinusoidal Functions",
      "difficulty": "Medium"
    }
  ],
  "metadata": {
    "generated_by": "LLM Question Generator",
    "generation_date": "2025-06-19",
    "format_version": "Phase Four LaTeX-Native",
    "total_questions": 24,
    "subject": "Digital Signal Processing and Object-Oriented Programming",
    "mathematical_notation": "LaTeX math mode",
    "topics_covered": ["Signals Time Domain", "Object-Oriented Programming"],
    "subtopics_covered": ["Signal Processing", "Sampling", "Sinusoidal Functions", "Design Principles", "Fundamentals"]
  }
}